// Flexbox
@mixin flex($direction: row, $justify: flex-start, $align: stretch) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

// Grid
@mixin grid($columns: 1, $gap: 1rem) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Media Queries
@mixin media-breakpoint-up($breakpoint) {
  @if $breakpoint == sm {
    @media (min-width: 576px) { @content; }
  } @else if $breakpoint == md {
    @media (min-width: 768px) { @content; }
  } @else if $breakpoint == lg {
    @media (min-width: 992px) { @content; }
  } @else if $breakpoint == xl {
    @media (min-width: 1200px) { @content; }
  }
}

// Transitions
@mixin transition($property: all, $duration: 0.2s, $timing: ease-in-out) {
  transition: $property $duration $timing;
}

// Shadows
@mixin box-shadow($level: 1) {
  @if $level == 1 {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  } @else if $level == 2 {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  } @else if $level == 3 {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  }
}

// Text truncate
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Center element
@mixin center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
} 






//--------------------------------------------------------------
// 响应式断点
//--------------------------------------------------------------
$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

// 响应式 mixins
@mixin media-breakpoint-up($name) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name) {
      @content;
    }
  }
}

// 辅助函数
@function breakpoint-min($name, $breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
}

@function breakpoint-next($name, $breakpoints) {
  $names: map-keys($breakpoints);
  $n: index($names, $name);
  @return if($n < length($names), nth($names, $n + 1), null);
}

// 常用 mixins
// @mixin clearfix {
//   &::after {
//     content: "";
//     display: table;
//     clear: both;
//   }
// }

// @mixin text-truncate {
//   overflow: hidden;
//   text-overflow: ellipsis;
//   white-space: nowrap;
// }

// @mixin absolute-center {
//   position: absolute;
//   top: 50%;
//   left: 50%;
//   transform: translate(-50%, -50%);
// }

// @mixin flex-center {
//   display: flex;
//   align-items: center;
//   justify-content: center;
// }

// @mixin flex-between {
//   display: flex;
//   align-items: center;
//   justify-content: space-between;
// }

// @mixin flex-column {
//   display: flex;
//   flex-direction: column;
// }

// // @mixin hover-focus {
// //   &:hover,
// //   &:focus {
// //     @content;
// //   }
// // }

// @mixin transition($property: all, $duration: 0.3s, $timing: ease) {
//   transition: $property $duration $timing;
// }

// @mixin box-shadow($level: 1) {
//   @if $level == 1 {
//     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
//   } @else if $level == 2 {
//     box-shadow: 0 4px 8px rgba(0, 0, 0, 0.12);
//   } @else if $level == 3 {
//     box-shadow: 0 8px 16px rgba(0, 0, 0, 0.14);
//   }
// }

// @mixin gradient($start-color, $end-color, $direction: to right) {
//   background: linear-gradient($direction, $start-color, $end-color);
// }

// @mixin opacity($opacity) {
//   opacity: $opacity;
//   filter: alpha(opacity=($opacity * 100));
// }

// @mixin placeholder {
//   &::-webkit-input-placeholder {
//     @content;
//   }
//   &:-moz-placeholder {
//     @content;
//   }
//   &::-moz-placeholder {
//     @content;
//   }
//   &:-ms-input-placeholder {
//     @content;
//   }
// } 


